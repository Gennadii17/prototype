Index: simple-service/src/main/java/org/nure/julia/web/ITestController.java
===================================================================
--- simple-service/src/main/java/org/nure/julia/web/ITestController.java	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ simple-service/src/main/java/org/nure/julia/web/ITestController.java	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
@@ -1,14 +0,0 @@
-package org.nure.julia.web;
-
-import org.nure.julia.HystrixFallbackController;
-import org.springframework.cloud.openfeign.FeignClient;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.GetMapping;
-
-@FeignClient(name = "simple-service")
-public interface ITestController extends HystrixFallbackController {
-
-    @GetMapping("/status/check")
-    ResponseEntity status();
-
-}
Index: simple-service/src/main/java/org/nure/julia/web/TestController.java
===================================================================
--- simple-service/src/main/java/org/nure/julia/web/TestController.java	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ simple-service/src/main/java/org/nure/julia/web/TestController.java	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
@@ -1,37 +0,0 @@
-package org.nure.julia.web;
-
-import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
-import io.swagger.annotations.ApiOperation;
-import io.swagger.annotations.Authorization;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.http.ResponseEntity;
-import org.springframework.jms.core.JmsTemplate;
-import org.springframework.web.bind.annotation.CrossOrigin;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RestController;
-
-@RequestMapping("/api/simple")
-@ApplicationController
-public class TestController implements ITestController {
-
-    @Value("${spring.application.name}.outbound")
-    private String topic;
-
-    @HystrixCommand(fallbackMethod = "fallback")
-    public ResponseEntity status() {
-        return ResponseEntity.ok("Working");
-    }
-
-    /*@JmsListener(destination = "${spring.application.name}.inbound")
-    public void abc(final Message message) throws JMSException {
-        Optional<String> m = ListenerTemplate.receiveText(message);
-        m.isPresent();
-    }*/
-
-    @SuppressWarnings("unchecked")
-    private ResponseEntity fallback() {
-        return this.defaultFallback();
-    }
-
-}
Index: hystrix-dashboard/src/main/java/org/nure/julia/swagger/ServiceDefinitionsContext.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- hystrix-dashboard/src/main/java/org/nure/julia/swagger/ServiceDefinitionsContext.java	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ hystrix-dashboard/src/main/java/org/nure/julia/swagger/ServiceDefinitionsContext.java	(date 1569935384268)
@@ -28,10 +28,10 @@
     }
 
     public List<SwaggerResource> getSwaggerDefinitions() {
-        return serviceDescriptions.entrySet().stream().map(serviceDefinition -> {
+        return serviceDescriptions.keySet().stream().map(s -> {
             SwaggerResource resource = new SwaggerResource();
-            resource.setLocation("/service/" + serviceDefinition.getKey());
-            resource.setName(serviceDefinition.getKey());
+            resource.setLocation("/service/" + s);
+            resource.setName(s);
             resource.setSwaggerVersion("2.0");
             return resource;
         }).collect(Collectors.toList());
Index: database/src/main/java/org/nure/julia/security/EncryptDecryptConverter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- database/src/main/java/org/nure/julia/security/EncryptDecryptConverter.java	(date 1569852001332)
+++ database/src/main/java/org/nure/julia/security/EncryptDecryptConverter.java	(date 1569852001332)
@@ -0,0 +1,18 @@
+package org.nure.julia.security;
+
+import javax.persistence.AttributeConverter;
+import java.nio.charset.StandardCharsets;
+import java.util.Base64;
+
+public class EncryptDecryptConverter implements AttributeConverter<String, String> {
+
+    @Override
+    public String convertToDatabaseColumn(String s) {
+        return Base64.getEncoder().encodeToString(s.getBytes(StandardCharsets.UTF_8));
+    }
+
+    @Override
+    public String convertToEntityAttribute(String s) {
+        return new String(Base64.getDecoder().decode(s.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
+    }
+}
Index: hystrix-dashboard/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- hystrix-dashboard/src/main/resources/application.yml	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ hystrix-dashboard/src/main/resources/application.yml	(date 1569850225442)
@@ -13,7 +13,7 @@
     application:
         name: hystrix-dashboard
 turbine:
-    appConfig: simple-service,authentication-service
+    appConfig: user-service,authentication-service
     clusterNameExpression: new String("default")
 swagger:
   services:
Index: user-service/src/main/java/org/nure/julia/exceptions/UserNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user-service/src/main/java/org/nure/julia/exceptions/UserNotFoundException.java	(date 1569853901459)
+++ user-service/src/main/java/org/nure/julia/exceptions/UserNotFoundException.java	(date 1569853901459)
@@ -0,0 +1,14 @@
+package org.nure.julia.exceptions;
+
+public class UserNotFoundException extends RuntimeException {
+
+    public UserNotFoundException() {}
+
+    public UserNotFoundException(String msg) {
+        super(msg);
+    }
+
+    public UserNotFoundException(String msg, Throwable t) {
+        super(msg, t);
+    }
+}
Index: user-service/src/main/java/org/nure/julia/service/spi/UserAuthorizationServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user-service/src/main/java/org/nure/julia/service/spi/UserAuthorizationServiceImpl.java	(date 1569960955770)
+++ user-service/src/main/java/org/nure/julia/service/spi/UserAuthorizationServiceImpl.java	(date 1569960955770)
@@ -0,0 +1,45 @@
+package org.nure.julia.service.spi;
+
+import org.nure.julia.SecurityWebFilter;
+import org.nure.julia.dto.ClaimIdentityDto;
+import org.nure.julia.dto.SessionDto;
+import org.nure.julia.entity.user.WebUser;
+import org.nure.julia.service.UserAuthorizationService;
+import org.springframework.http.HttpEntity;
+import org.springframework.http.HttpMethod;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Service;
+import org.springframework.web.client.RestTemplate;
+
+import java.util.Optional;
+
+@Service
+public class UserAuthorizationServiceImpl implements UserAuthorizationService {
+
+    private final RestTemplate restTemplate;
+    private final SecurityWebFilter securityWebFilter;
+
+    public UserAuthorizationServiceImpl(RestTemplate restTemplate, SecurityWebFilter securityWebFilter) {
+        this.restTemplate = restTemplate;
+        this.securityWebFilter = securityWebFilter;
+    }
+
+    @Override
+    public Optional<SessionDto> registerClaim(WebUser webUser) {
+        ClaimIdentityDto claimIdentityDto = new ClaimIdentityDto();
+        claimIdentityDto.setClaimKey(webUser.getClaimKey());
+        claimIdentityDto.setIdentifier(String.valueOf(webUser.getId()));
+
+        ResponseEntity<SessionDto> response = restTemplate.exchange(
+                securityWebFilter.getAuthenticationServiceURL(),
+                HttpMethod.POST,
+                new HttpEntity<>(claimIdentityDto),
+                SessionDto.class
+        );
+
+        return response.getStatusCode() == HttpStatus.OK
+                ? Optional.ofNullable(response.getBody())
+                : Optional.empty();
+    }
+}
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ pom.xml	(date 1569961789941)
@@ -11,7 +11,7 @@
     <modules>
         <module>gateway</module>
         <module>eureka-service</module>
-        <module>simple-service</module>
+        <module>user-service</module>
         <module>authentication</module>
         <module>swagger</module>
         <module>hystrix-configuration</module>
@@ -21,5 +21,4 @@
         <module>security</module>
     </modules>
 
-
 </project>
\ No newline at end of file
Index: user-service/src/main/java/org/nure/julia/dto/SessionDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user-service/src/main/java/org/nure/julia/dto/SessionDto.java	(date 1569862156802)
+++ user-service/src/main/java/org/nure/julia/dto/SessionDto.java	(date 1569862156802)
@@ -0,0 +1,27 @@
+package org.nure.julia.dto;
+
+import java.io.Serializable;
+import java.util.Date;
+
+public class SessionDto implements Serializable {
+    private String token;
+    private Date expirationDate;
+
+    public SessionDto(String token, long lifeTime) {
+        this.token = token;
+        this.expirationDate = new Date(System.currentTimeMillis() + lifeTime);
+    }
+
+    public String getToken() {
+        return token;
+    }
+
+    public void setToken(String token) {
+        this.token = token;
+    }
+
+    public Date getExpirationDate() {
+        return expirationDate;
+    }
+
+}
Index: swagger/src/main/java/org/nure/julia/web/ApplicationController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- swagger/src/main/java/org/nure/julia/web/ApplicationController.java	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ swagger/src/main/java/org/nure/julia/web/ApplicationController.java	(date 1569956210019)
@@ -1,7 +1,5 @@
 package org.nure.julia.web;
 
-import io.swagger.annotations.ApiOperation;
-import io.swagger.annotations.Authorization;
 import org.springframework.web.bind.annotation.CrossOrigin;
 import org.springframework.web.bind.annotation.RestController;
 
@@ -14,6 +12,5 @@
 @Target({ElementType.TYPE})
 @RestController
 @CrossOrigin
-@ApiOperation(value = "Authorization token checkout", authorizations = @Authorization(value = "Bearer"))
 public @interface ApplicationController {
 }
Index: user-service/src/main/java/org/nure/julia/dto/WebUserDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user-service/src/main/java/org/nure/julia/dto/WebUserDto.java	(date 1569859654852)
+++ user-service/src/main/java/org/nure/julia/dto/WebUserDto.java	(date 1569859654852)
@@ -0,0 +1,31 @@
+package org.nure.julia.dto;
+
+public class WebUserDto {
+    private String email;
+    private String password;
+    private String photoUrl;
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public String getPhotoUrl() {
+        return photoUrl;
+    }
+
+    public void setPhotoUrl(String photoUrl) {
+        this.photoUrl = photoUrl;
+    }
+}
Index: database/src/main/java/org/nure/julia/DatabaseConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- database/src/main/java/org/nure/julia/DatabaseConfiguration.java	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ database/src/main/java/org/nure/julia/DatabaseConfiguration.java	(date 1569852919593)
@@ -2,8 +2,12 @@
 
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.PropertySource;
+import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
+import org.springframework.transaction.annotation.EnableTransactionManagement;
 
 @Configuration
 @PropertySource("classpath:application-database.properties")
+@EnableTransactionManagement
+@EnableJpaRepositories("org.nure.julia.repository")
 public class DatabaseConfiguration {
 }
Index: user-service/src/main/java/org/nure/julia/dto/FullUserDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user-service/src/main/java/org/nure/julia/dto/FullUserDto.java	(date 1569862799324)
+++ user-service/src/main/java/org/nure/julia/dto/FullUserDto.java	(date 1569862799324)
@@ -0,0 +1,22 @@
+package org.nure.julia.dto;
+
+public class FullUserDto {
+    private WebUserDto webUser;
+    private SessionDto session;
+
+    public WebUserDto getWebUser() {
+        return webUser;
+    }
+
+    public void setWebUser(WebUserDto webUser) {
+        this.webUser = webUser;
+    }
+
+    public SessionDto getSession() {
+        return session;
+    }
+
+    public void setSession(SessionDto session) {
+        this.session = session;
+    }
+}
Index: security/src/main/java/org/nure/julia/SecurityWebFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- security/src/main/java/org/nure/julia/SecurityWebFilter.java	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ security/src/main/java/org/nure/julia/SecurityWebFilter.java	(date 1569957774224)
@@ -6,6 +6,7 @@
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.cloud.client.ServiceInstance;
 import org.springframework.cloud.client.discovery.DiscoveryClient;
+import org.springframework.context.annotation.PropertySource;
 import org.springframework.http.HttpEntity;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.HttpStatus;
@@ -26,6 +27,7 @@
 import java.util.*;
 
 @Component
+@PropertySource("classpath:application-security.properties")
 public class SecurityWebFilter extends OncePerRequestFilter {
 
     @Value("${default.security.context}")
@@ -38,6 +40,18 @@
         this.discoveryClient = discoveryClient;
     }
 
+    public String getAuthenticationServiceURL() {
+        List<ServiceInstance> gatewayInstances = discoveryClient.getInstances("gateway-service");
+        if (gatewayInstances == null || gatewayInstances.isEmpty()) {
+            List<ServiceInstance> authInstances = discoveryClient.getInstances("authentication-service");
+            return gatewayInstances == null || gatewayInstances.isEmpty()
+                    ? StringUtils.EMPTY
+                    : authInstances.get(0).getUri() + securityContextPath;
+        } else {
+            return gatewayInstances.get(0).getUri() + securityContextPath;
+        }
+    }
+
     @SuppressWarnings({"NullableProblems"})
     protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
                                     FilterChain filterChain) throws ServletException, IOException {
@@ -77,18 +91,6 @@
 
     }
 
-    private String getAuthenticationServiceURL() {
-        List<ServiceInstance> gatewayInstances = discoveryClient.getInstances("gateway-service");
-        if (gatewayInstances == null || gatewayInstances.isEmpty()) {
-            List<ServiceInstance> authInstances = discoveryClient.getInstances("authentication-service");
-            return gatewayInstances == null || gatewayInstances.isEmpty()
-                    ? StringUtils.EMPTY
-                    : authInstances.get(0).getUri() + securityContextPath;
-        } else {
-            return gatewayInstances.get(0).getUri() + securityContextPath;
-        }
-    }
-
     private final class MutableHttpServletRequest extends HttpServletRequestWrapper {
 
         private final Map<String, String> customHeaders;
Index: security/src/main/java/org/nure/julia/dto/ClaimIdentityDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- security/src/main/java/org/nure/julia/dto/ClaimIdentityDto.java	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ security/src/main/java/org/nure/julia/dto/ClaimIdentityDto.java	(date 1569854060039)
@@ -1,7 +1,6 @@
 package org.nure.julia.dto;
 
 public class ClaimIdentityDto {
-
     private String identifier;
     private String claimKey;
 
Index: security/src/main/resources/application-security.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1251
===================================================================
--- security/src/main/resources/application-security.properties	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ security/src/main/resources/application-security.properties	(date 1569959907952)
@@ -1,3 +1,5 @@
 #Security default configuration
 default.security.context=/api/auth
-default.security.includes=/*
\ No newline at end of file
+default.security.includes=/*
+security.basic.enabled =false
+management.security.enabled = false
\ No newline at end of file
Index: database/src/main/java/org/nure/julia/entity/KeyClaimable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- database/src/main/java/org/nure/julia/entity/KeyClaimable.java	(date 1569852701826)
+++ database/src/main/java/org/nure/julia/entity/KeyClaimable.java	(date 1569852701826)
@@ -0,0 +1,16 @@
+package org.nure.julia.entity;
+
+import java.nio.charset.StandardCharsets;
+import java.util.Base64;
+
+public interface KeyClaimable {
+    String getClaimKey();
+
+    default String encode(String data) {
+        return Base64.getEncoder().encodeToString(data.getBytes(StandardCharsets.UTF_8));
+    }
+
+    default boolean validate(String key) {
+        return key.equals(getClaimKey());
+    }
+}
Index: eureka-service/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- eureka-service/pom.xml	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ eureka-service/pom.xml	(date 1569934414608)
@@ -59,8 +59,12 @@
     <build>
         <plugins>
             <plugin>
-                <groupId>org.springframework.boot</groupId>
-                <artifactId>spring-boot-maven-plugin</artifactId>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <configuration>
+                    <source>1.8</source>
+                    <target>1.8</target>
+                </configuration>
             </plugin>
         </plugins>
     </build>
Index: simple-service/pom.xml
===================================================================
--- simple-service/pom.xml	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ user-service/pom.xml	(date 1569960686862)
@@ -9,7 +9,7 @@
     </parent>
     <modelVersion>4.0.0</modelVersion>
 
-    <artifactId>simple-service</artifactId>
+    <artifactId>user-service</artifactId>
     <version>1.0-SNAPSHOT</version>
 
     <properties>
@@ -73,6 +73,12 @@
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-actuator</artifactId>
         </dependency>
+
+        <dependency>
+            <groupId>org.modelmapper</groupId>
+            <artifactId>modelmapper</artifactId>
+            <version>2.3.2</version>
+        </dependency>
 
         <dependency>
             <groupId>org.springframework.cloud</groupId>
Index: user-service/src/main/java/org/nure/julia/web/WebControllerDefinitions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user-service/src/main/java/org/nure/julia/web/WebControllerDefinitions.java	(date 1569956272953)
+++ user-service/src/main/java/org/nure/julia/web/WebControllerDefinitions.java	(date 1569956272953)
@@ -0,0 +1,14 @@
+package org.nure.julia.web;
+
+public final class WebControllerDefinitions {
+    public static final String BASE_URL = "/api/user";
+
+    public static final String USER_ID_PARAMETER = "userId";
+
+    //UserController Definitions
+    public static final String USER_URL = BASE_URL + "/default";
+    public static final String USER_WITH_USER_ID_PARAMETER_URL = USER_URL + "/{" + USER_ID_PARAMETER + "}";
+    public static final String USER_AUTHORIZATION_URL = USER_URL + "/authorization";
+
+    private WebControllerDefinitions() {}
+}
Index: authentication/src/main/java/org/nure/julia/web/spi/AuthorizationControllerImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- authentication/src/main/java/org/nure/julia/web/spi/AuthorizationControllerImpl.java	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ authentication/src/main/java/org/nure/julia/web/spi/AuthorizationControllerImpl.java	(date 1569957913993)
@@ -4,6 +4,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.nure.julia.model.Claim;
 import org.nure.julia.service.spi.SessionManagementService;
+import org.nure.julia.web.ApplicationController;
 import org.nure.julia.web.AuthorizationController;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
@@ -13,9 +14,8 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-@RestController
+@ApplicationController
 @RequestMapping("/api/auth")
-@CrossOrigin
 public class AuthorizationControllerImpl implements AuthorizationController {
 
     private final SessionManagementService sessionService;
Index: database/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- database/pom.xml	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ database/pom.xml	(date 1569851984499)
@@ -10,6 +10,18 @@
     <modelVersion>4.0.0</modelVersion>
 
     <artifactId>database</artifactId>
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <configuration>
+                    <source>8</source>
+                    <target>8</target>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
 
     <properties>
         <java.version>1.8</java.version>
Index: security/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- security/pom.xml	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ security/pom.xml	(date 1569957395770)
@@ -73,11 +73,6 @@
             <artifactId>spring-boot-starter-web</artifactId>
         </dependency>
 
-        <dependency>
-            <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-security</artifactId>
-        </dependency>
-
         <dependency>
             <groupId>org.apache.commons</groupId>
             <artifactId>commons-lang3</artifactId>
Index: user-service/src/main/java/org/nure/julia/web/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user-service/src/main/java/org/nure/julia/web/UserController.java	(date 1569960955846)
+++ user-service/src/main/java/org/nure/julia/web/UserController.java	(date 1569960955846)
@@ -0,0 +1,25 @@
+package org.nure.julia.web;
+
+import org.nure.julia.HystrixFallbackController;
+import org.nure.julia.dto.WebUserDto;
+import org.springframework.cloud.openfeign.FeignClient;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PostMapping;
+
+import javax.servlet.http.HttpServletResponse;
+
+import static org.nure.julia.web.WebControllerDefinitions.USER_AUTHORIZATION_URL;
+import static org.nure.julia.web.WebControllerDefinitions.USER_WITH_USER_ID_PARAMETER_URL;
+
+@FeignClient(name = "user-service")
+public interface UserController extends HystrixFallbackController {
+    @PostMapping
+    ResponseEntity createUser(final WebUserDto userDto);
+
+    @GetMapping(USER_WITH_USER_ID_PARAMETER_URL)
+    ResponseEntity<WebUserDto> getUserInfo(Long userId);
+
+    @PostMapping(USER_AUTHORIZATION_URL)
+    ResponseEntity<WebUserDto> authorize(HttpServletResponse response, final WebUserDto userDto);
+}
Index: user-service/src/main/java/org/nure/julia/web/spi/UserControllerImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user-service/src/main/java/org/nure/julia/web/spi/UserControllerImpl.java	(date 1569933647074)
+++ user-service/src/main/java/org/nure/julia/web/spi/UserControllerImpl.java	(date 1569933647074)
@@ -0,0 +1,64 @@
+package org.nure.julia.web.spi;
+
+import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
+import org.nure.julia.dto.FullUserDto;
+import org.nure.julia.dto.WebUserDto;
+import org.nure.julia.service.UserService;
+import org.nure.julia.web.ApplicationController;
+import org.nure.julia.web.UserController;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestHeader;
+import org.springframework.web.bind.annotation.RequestMapping;
+
+import javax.servlet.http.HttpServletResponse;
+
+import static org.nure.julia.web.WebControllerDefinitions.USER_ID_PARAMETER;
+import static org.nure.julia.web.WebControllerDefinitions.USER_URL;
+
+@ApplicationController
+@RequestMapping(USER_URL)
+public class UserControllerImpl implements UserController {
+
+    private final UserService userService;
+
+    public UserControllerImpl(UserService userService) {
+        this.userService = userService;
+    }
+
+    @Override
+    @HystrixCommand(fallbackMethod = "fallback")
+    public ResponseEntity createUser(@RequestBody WebUserDto userDto) {
+        return userService.addUser(userDto)
+                ? ResponseEntity.ok().build()
+                : ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
+    }
+
+    @Override
+    @HystrixCommand(fallbackMethod = "fallback")
+    public ResponseEntity<WebUserDto> getUserInfo(@RequestHeader(name = USER_ID_PARAMETER) Long userId) {
+        return ResponseEntity.ok(userService.getUserInfo(userId));
+    }
+
+    @Override
+    @HystrixCommand(fallbackMethod = "fallback")
+    public ResponseEntity<WebUserDto> authorize(HttpServletResponse response, @RequestBody WebUserDto userDto) {
+        FullUserDto fullUserDto = userService.authorizeUser(userDto);
+        response.addHeader("SecurityToken", fullUserDto.getSession().getToken());
+
+        return ResponseEntity.ok(fullUserDto.getWebUser());
+    }
+
+    private ResponseEntity fallback(WebUserDto userDto) {
+        return this.defaultFallback();
+    }
+
+    private ResponseEntity fallback(Long userId) {
+        return this.defaultFallback();
+    }
+
+    private ResponseEntity fallback(HttpServletResponse response, WebUserDto userDto) {
+        return this.defaultFallback();
+    }
+}
Index: database/src/main/java/org/nure/julia/repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- database/src/main/java/org/nure/julia/repository/UserRepository.java	(date 1569861442576)
+++ database/src/main/java/org/nure/julia/repository/UserRepository.java	(date 1569861442576)
@@ -0,0 +1,12 @@
+package org.nure.julia.repository;
+
+import org.nure.julia.entity.user.WebUser;
+import org.springframework.data.repository.CrudRepository;
+
+import java.util.Optional;
+
+public interface UserRepository extends CrudRepository<WebUser, Long> {
+    Optional<WebUser> findByEmail(String email);
+
+    Optional<WebUser> findByEmailAndPassword(String email, String password);
+}
Index: user-service/src/main/java/org/nure/julia/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user-service/src/main/java/org/nure/julia/service/UserService.java	(date 1569960955737)
+++ user-service/src/main/java/org/nure/julia/service/UserService.java	(date 1569960955737)
@@ -0,0 +1,12 @@
+package org.nure.julia.service;
+
+import org.nure.julia.dto.FullUserDto;
+import org.nure.julia.dto.WebUserDto;
+
+public interface UserService {
+    boolean addUser(final WebUserDto webUserDto);
+
+    WebUserDto getUserInfo(Long userId);
+
+    FullUserDto authorizeUser(final WebUserDto webUserDto);
+}
Index: simple-service/src/main/java/org/nure/julia/SimpleServiceApplication.java
===================================================================
--- simple-service/src/main/java/org/nure/julia/SimpleServiceApplication.java	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ user-service/src/main/java/org/nure/julia/SimpleServiceApplication.java	(date 1569961978268)
@@ -1,10 +1,13 @@
 package org.nure.julia;
 
+import org.modelmapper.ModelMapper;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
 import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
 import org.springframework.cloud.openfeign.EnableFeignClients;
+import org.springframework.context.annotation.Bean;
+import org.springframework.web.client.RestTemplate;
 import springfox.documentation.swagger2.annotations.EnableSwagger2;
 
 @SpringBootApplication
@@ -19,5 +22,14 @@
         SpringApplication.run(SimpleServiceApplication.class, args);
     }
 
+    @Bean
+    public ModelMapper modelMapper() {
+        return new ModelMapper();
+    }
+
+    @Bean
+    public RestTemplate restTemplate() {
+        return new RestTemplate();
+    }
 }
 
Index: database/src/main/java/org/nure/julia/entity/user/WebUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- database/src/main/java/org/nure/julia/entity/user/WebUser.java	(date 1569852654775)
+++ database/src/main/java/org/nure/julia/entity/user/WebUser.java	(date 1569852654775)
@@ -0,0 +1,86 @@
+package org.nure.julia.entity.user;
+
+import org.nure.julia.entity.KeyClaimable;
+import org.nure.julia.security.EncryptDecryptConverter;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "web_user")
+public class WebUser implements KeyClaimable, Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @Column(name = "email", nullable = false, unique = true, updatable = false)
+    private String email;
+
+    @Column(name = "password", nullable = false)
+    @Convert(converter = EncryptDecryptConverter.class)
+    private String password;
+
+    @Temporal(TemporalType.TIMESTAMP)
+    @Column(name = "creation_date", nullable = false, updatable = false)
+    private Date creationDate;
+
+    @Column(name = "user_name", nullable = false)
+    private String username;
+
+    @Column(name = "photo_url")
+    private String photoUrl;
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public Date getCreationDate() {
+        return creationDate;
+    }
+
+    public void setCreationDate(Date creationDate) {
+        this.creationDate = creationDate;
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public String getPhotoUrl() {
+        return photoUrl;
+    }
+
+    public void setPhotoUrl(String photoUrl) {
+        this.photoUrl = photoUrl;
+    }
+
+    @Override
+    public String getClaimKey() {
+        return encode(id + email + creationDate.getTime());
+    }
+}
Index: user-service/src/main/java/org/nure/julia/service/spi/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user-service/src/main/java/org/nure/julia/service/spi/UserServiceImpl.java	(date 1569957615869)
+++ user-service/src/main/java/org/nure/julia/service/spi/UserServiceImpl.java	(date 1569957615869)
@@ -0,0 +1,73 @@
+package org.nure.julia.service.spi;
+
+import org.modelmapper.ModelMapper;
+import org.nure.julia.dto.FullUserDto;
+import org.nure.julia.dto.SessionDto;
+import org.nure.julia.dto.WebUserDto;
+import org.nure.julia.entity.user.WebUser;
+import org.nure.julia.exceptions.MissingEmailOrPasswordException;
+import org.nure.julia.exceptions.SessionManagementException;
+import org.nure.julia.exceptions.UserEmailExistsException;
+import org.nure.julia.exceptions.UserNotFoundException;
+import org.nure.julia.repository.UserRepository;
+import org.nure.julia.service.UserAuthorizationService;
+import org.nure.julia.service.UserService;
+import org.springframework.stereotype.Service;
+
+import javax.transaction.Transactional;
+
+import static java.util.Objects.nonNull;
+
+@Service
+@Transactional
+public class UserServiceImpl implements UserService {
+
+    private final UserRepository userRepository;
+    private final ModelMapper modelMapper;
+    private final UserAuthorizationService authorizationService;
+
+    public UserServiceImpl(UserRepository userRepository, ModelMapper modelMapper, UserAuthorizationService authorizationService) {
+        this.userRepository = userRepository;
+        this.modelMapper = modelMapper;
+        this.authorizationService = authorizationService;
+    }
+
+    @Override
+    public boolean addUser(final WebUserDto webUserDto) {
+        if (!userRepository.findByEmail(webUserDto.getEmail()).isPresent()) {
+            WebUser user = modelMapper.map(webUserDto, WebUser.class);
+            userRepository.save(user);
+
+            return nonNull(user.getId());
+        } else {
+            throw new UserEmailExistsException("User`s email is already in use");
+        }
+    }
+
+    @Override
+    public WebUserDto getUserInfo(Long userId) {
+        WebUser user = userRepository.findById(userId)
+                .orElseThrow(() -> new UserNotFoundException("User doesn`t exist"));
+
+        return modelMapper.map(user, WebUserDto.class);
+    }
+
+    @Override
+    public FullUserDto authorizeUser(WebUserDto webUserDto) {
+        if (nonNull(webUserDto.getEmail()) && nonNull(webUserDto.getPassword())) {
+            WebUser user = userRepository.findByEmailAndPassword(webUserDto.getEmail(), webUserDto.getPassword())
+                    .orElseThrow(() -> new UserNotFoundException("User doesn`t exist"));
+
+            SessionDto sessionDto = authorizationService.registerClaim(user)
+                    .orElseThrow(() -> new SessionManagementException("Cannot register user session"));
+
+            FullUserDto fullUserDto = new FullUserDto();
+            fullUserDto.setWebUser(modelMapper.map(user, WebUserDto.class));
+            fullUserDto.setSession(sessionDto);
+
+            return fullUserDto;
+        } else {
+            throw new MissingEmailOrPasswordException("Email or password is missing");
+        }
+    }
+}
Index: simple-service/src/main/resources/application.yml
===================================================================
--- simple-service/src/main/resources/application.yml	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ user-service/src/main/resources/application.yml	(date 1569959870875)
@@ -6,7 +6,9 @@
     port: 8081
 spring:
     application:
-        name: simple-service
+        name: user-service
+    resources:
+        add-mappings: true
 management:
     endpoints:
         web:
@@ -14,4 +16,4 @@
                 include: hystrix.stream
 default:
     security:
-        includes: /api/simple/*
+        includes: /api/user/*
Index: user-service/src/main/java/org/nure/julia/exceptions/SessionManagementException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user-service/src/main/java/org/nure/julia/exceptions/SessionManagementException.java	(date 1569957572399)
+++ user-service/src/main/java/org/nure/julia/exceptions/SessionManagementException.java	(date 1569957572399)
@@ -0,0 +1,14 @@
+package org.nure.julia.exceptions;
+
+public class SessionManagementException extends RuntimeException {
+
+    public SessionManagementException() {}
+
+    public SessionManagementException(String msg) {
+        super(msg);
+    }
+
+    public SessionManagementException(String msg, Throwable t) {
+        super(msg, t);
+    }
+}
Index: user-service/src/main/java/org/nure/julia/exceptions/UserEmailExistsException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user-service/src/main/java/org/nure/julia/exceptions/UserEmailExistsException.java	(date 1569853788222)
+++ user-service/src/main/java/org/nure/julia/exceptions/UserEmailExistsException.java	(date 1569853788222)
@@ -0,0 +1,14 @@
+package org.nure.julia.exceptions;
+
+public class UserEmailExistsException extends RuntimeException {
+
+    public UserEmailExistsException() {}
+
+    public UserEmailExistsException(String msg) {
+        super(msg);
+    }
+
+    public UserEmailExistsException(String msg, Throwable t) {
+        super(msg, t);
+    }
+}
Index: gateway/src/main/java/org/nure/julia/GatewayApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gateway/src/main/java/org/nure/julia/GatewayApplication.java	(revision b7eed4d74717c640d4688bcf9d5352ab93ea6e4e)
+++ gateway/src/main/java/org/nure/julia/GatewayApplication.java	(date 1569850262993)
@@ -16,9 +16,9 @@
     @Bean
     public RouteLocator gatewayRoutes(RouteLocatorBuilder builder) {
         return builder.routes()
-                .route(r -> r.path("/api/simple/**")
-                        .uri("lb://SIMPLE-SERVICE")
-                        .id("simple-service"))
+                .route(r -> r.path("/api/user/**")
+                        .uri("lb://USER-SERVICE")
+                        .id("user-service"))
                 .route(r -> r.path("/api/auth/**")
                         .uri("lb://AUTHENTICATION-SERVICE")
                         .id("authentication-service"))
Index: user-service/src/main/java/org/nure/julia/service/UserAuthorizationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user-service/src/main/java/org/nure/julia/service/UserAuthorizationService.java	(date 1569960955812)
+++ user-service/src/main/java/org/nure/julia/service/UserAuthorizationService.java	(date 1569960955812)
@@ -0,0 +1,10 @@
+package org.nure.julia.service;
+
+import org.nure.julia.dto.SessionDto;
+import org.nure.julia.entity.user.WebUser;
+
+import java.util.Optional;
+
+public interface UserAuthorizationService {
+    Optional<SessionDto> registerClaim(WebUser webUser);
+}
Index: user-service/src/main/java/org/nure/julia/exceptions/MissingEmailOrPasswordException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user-service/src/main/java/org/nure/julia/exceptions/MissingEmailOrPasswordException.java	(date 1569861580291)
+++ user-service/src/main/java/org/nure/julia/exceptions/MissingEmailOrPasswordException.java	(date 1569861580291)
@@ -0,0 +1,14 @@
+package org.nure.julia.exceptions;
+
+public class MissingEmailOrPasswordException extends RuntimeException {
+
+    public MissingEmailOrPasswordException() {}
+
+    public MissingEmailOrPasswordException(String msg) {
+        super(msg);
+    }
+
+    public MissingEmailOrPasswordException(String msg, Throwable t) {
+        super(msg, t);
+    }
+}
